{"version":3,"sources":["components/Form/FormComponent.js","components/Form/FormContainer.js","components/LoadingComponent.js","components/QuoteComponent.js","components/App.js","serviceWorker.js","index.js"],"names":["FormComponent","options","handleChange","handleClick","tagName","className","defaultValue","onChange","value","onClick","event","Form","allTags","map","tag","name","toUpperCase","slice","key","_id","Loading","Quote","author","quote","icon","faQuoteLeft","App","useState","setQuote","setAuthor","setTagName","setAllTags","setError","loading","setLoading","useEffect","fetch","then","response","json","result","fetchData","a","ignore","axios","data","content","preventDefault","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8SAgBeA,G,MAbO,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QACzD,OACI,0BAAMC,UAAU,QACZ,4BAAQA,UAAU,SAASC,aAAcF,EAASG,SAAUL,GACxD,4BAAQM,MAAM,IAAd,UACCP,GAGL,4BAAQI,UAAU,MAAMI,QAAS,SAACC,GAAD,OAAWP,EAAYO,KAAxD,sBCUGC,EAlBF,SAAC,GAAqD,IAAnDR,EAAkD,EAAlDA,YAAaD,EAAqC,EAArCA,aAAcU,EAAuB,EAAvBA,QAASR,EAAc,EAAdA,QAE1CH,EAAUW,EAAQC,KAAI,SAAAC,GACxB,IAAIC,EAAOD,EAAIC,KAEf,OADAA,EAAOA,EAAK,GAAGC,cAAgBD,EAAKE,MAAM,GACnC,4BAAQC,IAAKJ,EAAIK,IAAKX,MAAOM,EAAIC,MAAOA,MAGnD,OACI,kBAAC,EAAD,CACId,QAASA,EACTC,aAAcA,EACdC,YAAaA,EACbC,QAASA,KCPNgB,G,MANC,WACZ,OACI,yBAAKf,UAAU,qB,gBCgBRgB,G,MAhBD,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,MACpB,OACI,6BACI,yBAAKlB,UAAU,cACX,yBAAKA,UAAU,iBACX,kBAAC,IAAD,CAAiBmB,KAAMC,MACtB,IAAIF,IAGT,yBAAKlB,UAAU,cACf,0BAAMA,UAAU,UAAUiB,OC+D3BI,G,MAvEH,WAAO,IAAD,EACYC,mBAAS,oBADrB,mBACPJ,EADO,KACAK,EADA,OAEcD,mBAAS,qBAFvB,mBAEPL,EAFO,KAECO,EAFD,OAGgBF,mBAAS,IAHzB,mBAGPvB,EAHO,KAGE0B,EAHF,OAIgBH,mBAAS,IAJzB,mBAIPf,EAJO,KAIEmB,EAJF,OAKYJ,mBAAS,IALrB,mBAKAK,GALA,aAMgBL,oBAAS,GANzB,mBAMPM,EANO,KAMEC,EANF,KAQdC,qBAAU,WACNC,MAAM,gCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFT,EAAWS,QAEhB,IAEH,IAUMC,EAAS,uCAAG,8BAAAC,EAAA,yDACVC,GAAS,EADC,SAGVT,GAAW,GACXF,EAAS,IACmB,KAAV5B,EALR,iCAMAwC,IAAM,wCAAD,OAAyCxC,IAN9C,4DAOAwC,IAAM,kCAPN,4BAKJN,EALI,KAQNK,IACAd,EAAUS,EAASO,KAAKvB,QACxBM,EAASU,EAASO,KAAKC,UAVjB,kDAaVd,GAAS,GAbC,eAedE,GAAW,GAfG,mBAgBP,WACHS,GAAS,KAjBC,0DAAH,qDAqBf,OACI,yBAAKtC,UAAU,aACX,yBAAKA,UAAU,QACR4B,EAcC,kBAAC,EAAD,MAbA,yBAAK5B,UAAU,SACX,kBAAC,EAAD,CACIkB,MAAOA,EACPD,OAAQA,IAEZ,kBAAC,EAAD,CACInB,YAzCJ,SAACO,GACjBA,EAAMqC,iBACNN,KAwCoBvC,aArCH,SAACQ,GAAW,IACtBF,EAASE,EAAMsC,OAAfxC,MACPsB,EAAWtB,IAoCSI,QAASA,EACTR,QAASA,SCvDjB6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.85584b64.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"../../styles/form.css\"\r\n\r\nconst FormComponent = ({ options, handleChange, handleClick, tagName }) => {\r\n    return (\r\n        <form className=\"form\">\r\n            <select className=\"select\" defaultValue={tagName} onChange={handleChange}>\r\n                <option value=\"\">Random</option>\r\n                {options}\r\n            </select>\r\n\r\n            <button className=\"btn\" onClick={(event) => handleClick(event)}>Generate quote!</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FormComponent","import React from 'react'\r\nimport FormComponent from './FormComponent'\r\n\r\nconst Form = ({ handleClick, handleChange, allTags, tagName }) => {\r\n\r\n    const options = allTags.map(tag => {\r\n        let name = tag.name\r\n        name = name[0].toUpperCase() + name.slice(1)\r\n        return <option key={tag._id} value={tag.name}>{name}</option>\r\n    })\r\n\r\n    return (\r\n        <FormComponent\r\n            options={options}\r\n            handleChange={handleChange}\r\n            handleClick={handleClick}\r\n            tagName={tagName}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react'\r\nimport '../styles/loading.css'\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className=\"loadingspinner\"></div>\r\n    )\r\n}\r\n\r\nexport default Loading","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons'\r\nimport \"../styles/quote.css\"\r\n\r\nconst Quote = ({author, quote}) => {\r\n    return (\r\n        <div>\r\n            <div className=\"quote-text\">\r\n                <div className=\"quote-content\">\r\n                    <FontAwesomeIcon icon={faQuoteLeft} />\r\n                    {\" \"+quote}\r\n                </div>\r\n            </div>\r\n                <div className=\"quote-name\">\r\n                <span className=\"author\">{author}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Quote\r\n","import React, { useState,useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport Form from './Form/FormContainer'\r\nimport Loading from './LoadingComponent'\r\nimport Quote from './QuoteComponent'\r\nimport '../styles/app.css'\r\n\r\nconst App = () => {\r\n    const [quote, setQuote] = useState('there goes quote')\r\n    const [author, setAuthor] = useState('there goes author')\r\n    const [tagName, setTagName] = useState('')\r\n    const [allTags, setAllTags] = useState([])\r\n    const [error, setError] = useState({})\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        fetch('https://api.quotable.io/tags')\r\n        .then(response => response.json())\r\n        .then(result => {\r\n            setAllTags(result)\r\n        })\r\n    }, [])\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        fetchData()\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        const {value} = event.target\r\n        setTagName(value)\r\n    }\r\n\r\n    const fetchData = async() => {\r\n        let ignore = false\r\n        try {\r\n            setLoading(true)\r\n            setError({})\r\n            const response = (tagName!=='') ?\r\n                await axios(`https://api.quotable.io/random/?tags=${tagName}`)\r\n            :   await axios(`https://api.quotable.io/random`)\r\n            if(!ignore) {\r\n                setAuthor(response.data.author)\r\n                setQuote(response.data.content)\r\n            }\r\n        } catch(err) {\r\n            setError(false)\r\n        }\r\n        setLoading(false)\r\n        return(() => {\r\n            ignore = true\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"main\">\r\n                {(!loading) ? (\r\n                    <div className=\"quote\">\r\n                        <Quote\r\n                            quote={quote}\r\n                            author={author}\r\n                        />\r\n                        <Form\r\n                            handleClick={handleClick}\r\n                            handleChange={handleChange}\r\n                            allTags={allTags}\r\n                            tagName={tagName}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <Loading />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}